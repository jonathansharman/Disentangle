import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import TwoCansAlpha2;

const X_RES = 640;
const Y_RES = 480;

const NODE_RADIUS = 10.0;
const NODE_BORDER = 2.0;

const EDGE_WIDTH = 3.5;

const BAR_HEIGHT = 20;

const MAX_TIME_PER_EDGE = 100;
const MAX_MOVES_PER_EDGE = 1;

const WIN_TIMER_LENGTH = 75;

const COLOR_SATURATION = 0.6;
const COLOR_VALUE = 0.9;

enum GameMode { CASUAL, TIMED, COUNTED }

enum GameState
	{ OVER
	, WON
	, NEUTRAL
	, DRAGGING
	, SELECTING
	}

class MainScene : AbstractScene {
	field nodeCountText;
	field resetText = Font.font.setColor(0, 0, 0).render(" Press Esc to return to main menu.");

	// Game mode and state
	field gameMode;
	field state = GameState.NEUTRAL;

	field nodeCount;
	field nodes = [];
	field edges = [];
	field solved = false;
	field badEdgeMap;
	field badNodeMap;
	field nodeToEdgesMap;
	field winTimer = 0;

	// Mouse position
	field xMouse;
	field yMouse;

	// Timed mode
	field maxLevelTime;
	field levelTimer;

	// Move-counted mode
	field maxMoves;
	field movesLeft;

	// Draw order and color maps
	field nodeDrawOrder = [];
	field nodeColors = [];
	field edgeDrawOrder = [];
	field edgeColors = [];

	// Dragging
	field clickedNode;
	field dragStart;
	field lastMousePos = [0, 0];

	// Node selection
	field selection;
	field selectionStart;
	field selectionEnd;
	field selectionCentroid;

	field bgColor = [212, 212, 212];

	constructor(gameMode, nodeCount) : base() {
		this.gameMode = gameMode;
		this.nodeCount = nodeCount;
		this.nodeCountText = Font.font.setColor(0, 0, 0).render(" " + this.nodeCount + " ");

		// Nodes start unselected.
		this.selection = [false] * nodeCount;

		// Initialize nodes in a circle.
		this.nodes = [];
		for (i = 0; i < this.nodeCount; ++i) {
			theta = i * 2 * Math.PI / this.nodeCount;
			offset = Math.min(X_RES, Y_RES) / 2 - 20;
			this.nodes.add([X_RES / 2 + offset * Math.cos(theta), Y_RES / 2 + offset * Math.sin(theta)]);
		}

		// Recursively connect all remaining nodes while retaining planarity.
		this.edges = [];
		this.planarConnect(0, this.nodes.length);

		// Map the edges attached to each node.
		this.nodeToEdgesMap = [];
		for (i = 0; i < this.nodes.length; ++i) {
			this.nodeToEdgesMap.add([]);
			for (j = 0; j < this.edges.length; ++j) {
				if (this.edges[j][0] == this.nodes[i] || this.edges[j][1] == this.nodes[i]) {
					this.nodeToEdgesMap[i].add(j);
				}
			}
		}

		// Randomize node positions until there's an intersection.
		foundIntersection = false;
		do {
			this.randomizeNodes();
			for (i = 0; !foundIntersection && i < this.edges.length - 1; ++i) {
				for (j = i + 1; j < this.edges.length; ++j) {
					if (this.edgeEdgeIntersect(this.edges[i], this.edges[j])) {
						foundIntersection = true;
						break;
					}
				}
			}
			// Relax nodes to generate a good-looking initial layout.
			this.relax(300, false);
		} while (!foundIntersection);

		this.updateSolvedStatus();

		// Shuffle node draw order and colors.
		for (i = 0; i < this.nodes.length; ++i) {
			this.nodeDrawOrder.add(i);
		}
		this.nodeDrawOrder.shuffle();
		for (i = 0; i < this.nodes.length; ++i) {
			this.nodeColors.add(MainScene.hsvToRgb
				( this.nodeDrawOrder[i] * 360.0 / this.nodes.length
				, COLOR_SATURATION
				, COLOR_VALUE
				));
		}
		// Shuffle edge draw order and colors.
		for (i = 0; i < this.edges.length; ++i) {
			this.edgeDrawOrder.add(i);
		}
		this.edgeDrawOrder.shuffle();
		for (i = 0; i < this.edges.length; ++i) {
			this.edgeColors.add(MainScene.hsvToRgb
				( this.edgeDrawOrder[i] * 360.0 / this.edges.length
				, COLOR_SATURATION
				, COLOR_VALUE
				));
		}

		// Mode-specific initialization.
		switch (this.gameMode) {
			case GameMode.CASUAL:
				break;
			case GameMode.TIMED:
				this.maxLevelTime = MAX_TIME_PER_EDGE * this.edges.length;
				this.levelTimer = this.maxLevelTime;
				break;
			case GameMode.COUNTED:
				this.maxMoves = MAX_MOVES_PER_EDGE * this.edges.length;
				this.movesLeft = this.maxMoves;
				break;
		}
	}

	// Computes x mod y, where x and y are nonnegative floating-point numbers.
	static function fmod(x, y) {
		while (x > y) {
			x -= y;
		}
		return x;
	}

	// h in [0.0, 360.0)
	// s in [0.0, 1.0]
	// v in [0.0, 1.0]
	static function hsvToRgb(h, s, v) {
		c = v * s;
		x = c * (1.0 - Math.abs(MainScene.fmod(h / 60, 2.0) - 1.0));
		m = v - c;
		switch (floor(h) / 60) {
			case 0:
				rgbPrime = [c, x, 0];
				break;
			case 1:
				rgbPrime = [x, c, 0];
				break;
			case 2:
				rgbPrime = [0, c, x];
				break;
			case 3:
				rgbPrime = [0, x, c];
				break;
			case 4:
				rgbPrime = [x, 0, c];
				break;
			case 5:
				rgbPrime = [c, 0, x];
				break;
		}
		return
			[ Math.floor((rgbPrime[0] + m) * 255)
			, Math.floor((rgbPrime[1] + m) * 255)
			, Math.floor((rgbPrime[2] + m) * 255)
			];
	}

	// Checks for intersection between line segments.
	// Adapted from https://stackoverflow.com/a/1968345/3217185.
	function edgeEdgeIntersect(edge0, edge1) {
		// Edges that share a node do not intersect.
		if (edge0[0] == edge1[0] || edge0[0] == edge1[1] || edge0[1] == edge1[0] || edge0[1] == edge1[1]) {
			return false;
		}

		// Put left points first.
		if (this.nodes[edge0[0]][0] <= this.nodes[edge0[1]][0]) {
			p0_x = this.nodes[edge0[0]][0];
			p0_y = this.nodes[edge0[0]][1];
			p1_x = this.nodes[edge0[1]][0];
			p1_y = this.nodes[edge0[1]][1];
		} else {
			p0_x = this.nodes[edge0[1]][0];
			p0_y = this.nodes[edge0[1]][1];
			p1_x = this.nodes[edge0[0]][0];
			p1_y = this.nodes[edge0[0]][1];
		}
		// p0 is the left-most node of edge0.
		if (this.nodes[edge1[0]][0] <= this.nodes[edge1[1]][0]) {
			p2_x = this.nodes[edge1[0]][0];
			p2_y = this.nodes[edge1[0]][1];
			p3_x = this.nodes[edge1[1]][0];
			p3_y = this.nodes[edge1[1]][1];
		} else {
			p2_x = this.nodes[edge1[1]][0];
			p2_y = this.nodes[edge1[1]][1];
			p3_x = this.nodes[edge1[0]][0];
			p3_y = this.nodes[edge1[0]][1];
		}
		// p2 is the left-most node of edge1.

		// Rule out intersection if one edge is completely to one side of the other.
		if (p1_x < p2_x) {
			// edge0 left of edge1.
			return false;
		}
		if (p0_x > p3_x) {
			// edge0 right of edge1.
			return false;
		}
		if (Math.max(p0_y, p1_y) < Math.min(p2_y, p3_y)) {
			// edge0 above edge1.
			return false;
		}
		if (Math.min(p0_y, p1_y) > Math.max(p2_y, p3_y)) {
			// edge0 below edge1.
			return false;
		}

	    s1_x = p1_x - p0_x;
		s1_y = p1_y - p0_y;
		s2_x = p3_x - p2_x;
		s2_y = p3_y - p2_y;

		denominator = -s2_x * s1_y + s1_x * s2_y;
		if (denominator == 0.0) {
			// Parallel. Could be collinear (ignoring this case).
			return false;
		}
		
		s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / denominator;
		t = ( s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / denominator;

		return s >= 0.0 && s <= 1.0 && t >= 0.0 && t <= 1.0;
	}

	// Find intersections and detect solutions.
	function updateSolvedStatus() {
		this.solved = true;
		this.badEdgeMap = [false] * this.edges.length;
		this.badNodeMap = [false] * this.nodes.length;
		for (i = 0; i < this.edges.length - 1; ++i) {
			for (j = i + 1; j < this.edges.length; ++j) {
				if (this.edgeEdgeIntersect(this.edges[i], this.edges[j])) {
					// Edges are bad.
					this.badEdgeMap[i] = true;
					this.badEdgeMap[j] = true;
					// Attached nodes are bad.
					this.badNodeMap[this.edges[i][0]] = true;
					this.badNodeMap[this.edges[i][1]] = true;
					this.badNodeMap[this.edges[j][0]] = true;
					this.badNodeMap[this.edges[j][1]] = true;
					// Graph is bad.
					this.solved = false;
				}
			}
		}
	}

	// Pushes the given node straight out from the given edge, if they are overlapping.
	function pushNodeOutOfEdge(node, edge) {
		edge0 = this.nodes[edge[0]];
		edge1 = this.nodes[edge[1]];
		// The vector from the start of the edge to the center of the node.
		a = [node[0] - edge0[0], node[1] - edge0[1]];
		// The vector from the start to the end of the edge.
		b = [edge1[0] - edge0[0], edge1[1] - edge0[1]];
		// Find the nearest point from the center of the node to the edge.
		bSquared = b[0] * b[0] + b[1] * b[1];
		if (bSquared == 0.0) {
			// Zero-length edge.
			return;
		}
		bLength = bSquared ** 0.5;
		bHat = [b[0] / bLength, b[1] / bLength];
		aDotBHat = a[0] * bHat[0] + a[1] * bHat[1];
		aOntoB = [aDotBHat * bHat[0], aDotBHat * bHat[1]];
		aOntoBSquared = aOntoB[0] * aOntoB[0] + aOntoB[1] * aOntoB[1];
		if (aOntoBSquared < 0.0 || bSquared < aOntoBSquared) {
			// p does not lie on the edge. There could be a partial overlap here, but that case is
			// handled by node-node interaction, so it doesn't need to be handled separately here.
			return;
		}
		// The point on the edge closest to the node.
		p = [edge0[0] + aOntoB[0], edge0[1] + aOntoB[1]];
		// Vector from point to node.
		pNode = [node[0] - p[0], node[1] - p[1]];
		pNodeSquared = pNode[0] * pNode[0] + pNode[1] * pNode[1];
		if (pNodeSquared > NODE_RADIUS ** 2) {
			// Not touching.
			return;
		} else {
			// Touching. Push out.
			pNodeLength = pNodeSquared ** 0.5;
			pNodeHat = pNodeLength == 0.0 ? pNode : [pNode[0] / pNodeLength, pNode[1] / pNodeLength];
			node[0] = p[0] + pNodeHat[0] * NODE_RADIUS;
			node[1] = p[1] + pNodeHat[1] * NODE_RADIUS;
		}
	}

	// Randomize node positions.
	function randomizeNodes() {
		for (i = 0; i < this.nodeCount; ++i) {
			this.nodes[i][0] = (0.1 + 0.8 * Random.randomFloat()) * X_RES;
			this.nodes[i][1] = (0.1 + 0.8 * Random.randomFloat()) * Y_RES;
		}
	}

	// Connects all the nodes from start to start + distance (modularly) until no more straight-line connections can be made without intersection.
	function planarConnect(start, distance, depth = 0) {
		end = (start + distance) % this.nodes.length;
		if (distance <= 2) {
			for (i = 0; i < distance; ++i) {
				this.edges.add([start + i, (start + i + 1) % this.nodes.length]);
			}
			return;
		}
		if (Random.randomInt(0, 2) == 0) {
			// Draw from start.
			i = Random.randomInt(start + 2, start + distance);
			this.edges.add([start, i]);
			if (start != end) {
				this.edges.add([i, end]);
			}
		} else {
			// Draw to end.
			i = Random.randomInt(start + 1, start + distance - 1);
			this.edges.add([i, end]);
			if (start != end) {
				this.edges.add([start, i]);
			}
		}
		this.planarConnect(start, i - start, depth + 1);
		this.planarConnect(i, start + distance - i, depth + 1);
	}

	// Clamps the given node to within the game bounds.
	function clamp(node) {
		if (node[0] < 0.0) {
			node[0] = 0.0;
		} else if (node[0] >= X_RES) {
			node[0] = X_RES - 1.0;
		}
		if (node[1] < 0.0) {
			node[1] = 0.0;
		} else if (node[1] >= Y_RES) {
			node[1] = Y_RES - 1.0;
		}
	}

	// Pushes nodes away from each other and away from the edges.
	function relax(iterations, ignoreSolved = true) {
		for (i = 0; i < iterations; ++i) {
			nextNodes = [];
			for (j = 0; j < this.nodes.length; ++j) {
				node = this.nodes[j];
				nextNodes.add(node);

				if (ignoreSolved && !this.badNodeMap[j]) {
					// Don't relax solved nodes.
					continue;
				}
				if (this.selection[j] || j == this.clickedNode) {
					// Don't relax selected nodes.
					continue;
				}

				wallForceFactor = 0.00025 * Math.ln(this.nodes.length);
				vel =
					[ wallForceFactor * (X_RES / 2 - node[0])
					, wallForceFactor * (Y_RES / 2 - node[1])
					];
				for (otherNode : this.nodes) {
					if (otherNode != node) {
						dx = node[0] - otherNode[0];
						dy = node[1] - otherNode[1];
						d2 = dx ** 2.0 + dy ** 2.0;
						if (d2 != 0.0) {
							vel[0] += dx / d2;
							vel[1] += dy / d2;
						}
					}
				}
				for (k = 0; k < this.edges.length; ++k) {
					edge = this.edges[k];
					if (edge[0] == j || edge[1] == j) {
						// Contract.
						otherNode = edge[0] == j ? this.nodes[edge[1]] : this.nodes[edge[0]];
						dx = otherNode[0] - node[0];
						dy = otherNode[1] - node[1];
						elasticForceFactor = 0.00005;
						vel[0] += elasticForceFactor * dx;
						vel[1] += elasticForceFactor * dy;
					} else {
						// Do collision.
						//this.pushNodeOutOfEdge(this.nodes[j], edge);
					}
				}
				velFactor = 15.0;
				node[0] += velFactor * vel[0];
				node[1] += velFactor * vel[1];
				this.clamp(node);
			}
			this.nodes = nextNodes;
		}
	}

	// Moves the node with the given index and its attached edges to the front.
	function moveToFront(index) {
		// Bubble up the target node.
		for (i = 0; i < this.nodeDrawOrder.length - 1; ++i) {
			if (this.nodeDrawOrder[i] == index) {
				t = this.nodeDrawOrder[i + 1];
				this.nodeDrawOrder[i] = t;
				this.nodeDrawOrder[i + 1] = index;
			}
		}
		// Stably partition the edges, with attached edges in front.
		edgeDrawOrderPartition = [[], []];
		for (i = 0; i < this.edgeDrawOrder.length; ++i) {
			edge = this.edges[this.edgeDrawOrder[i]];
			if (edge[0] == index || edge[1] == index) {
				edgeDrawOrderPartition[1].add(this.edgeDrawOrder[i]);
			} else {
				edgeDrawOrderPartition[0].add(this.edgeDrawOrder[i]);
			}
		}
		this.edgeDrawOrder = edgeDrawOrderPartition[0];
		this.edgeDrawOrder.concat(edgeDrawOrderPartition[1]);
	}

	function endGame() {
		this.state = GameState.OVER;
		this.bgColor = [212, 159, 159];
	}

	// Returns the closest node to the mouse of those the mouse is over or null if the mouse isn't over any nodes.
	function getHoveredNode() {
		hoveredNode = null;
		minDistance = 2 * NODE_RADIUS;
		for (i = 0; i < this.nodes.length; ++i) {
			distance = ((this.nodes[i][0] - this.xMouse) ** 2 + (this.nodes[i][1] - this.yMouse) ** 2) ** 0.5;
			if (distance <= NODE_RADIUS && (distance < minDistance)) {
				hoveredNode = i;
				minDistance = distance;
			}
		}
		return hoveredNode;
	}

	// Sets the selection centroid. Requires at least one selected node.
	function updateSelectionCentroid() {
		x = 0.0;
		y = 0.0;
		n = 0;
		for (i = 0; i < this.nodes.length; ++i) {
			if (this.selection[i]) {
				x += this.nodes[i][0];
				y += this.nodes[i][1];
				++n;
			}
		}
		this.selectionCentroid = [x / n, y / n];
	}

	function update(inputManager, events) {
		if (inputManager.isKeyPressed(KeyboardKey.ESCAPE)) {
			this.switchScene(new TitleScene());
			return;
		}

		if (this.state == GameState.WON) {
			--this.winTimer;
			if (this.winTimer == 0) {
				this.switchScene(new LoadingScene(this.gameMode, this.nodeCount + 1));
			}
			return;
		} else if (this.gameMode == GameMode.TIMED) {
			--this.levelTimer;
		}

		mousePos = inputManager.getMousePosition();
		this.xMouse = 1.0 * mousePos[0];
		this.yMouse = 1.0 * mousePos[1];

		for (e : events) {
			switch (e.type) {
				case EventType.MOUSE_RELEASE:
					switch (this.state) {
						case GameState.DRAGGING:
							// Release clicked node.
							if (this.gameMode == GameMode.COUNTED) {
								--this.movesLeft;
							}
							this.clickedNode = null;
							if (this.solved) {
								this.winTimer = WIN_TIMER_LENGTH;
								this.state = GameState.WON;
							} else {
								this.state = GameState.NEUTRAL;
							}
							break;
						case GameState.SELECTING:
							if (this.selectionStart[0] == this.selectionEnd[0] && this.selectionStart[1] == this.selectionEnd[1]) {
								// Single selection.
								selectedNode = this.getHoveredNode();
								if (selectedNode != null) {
									this.selection[selectedNode] = !this.selection[selectedNode];
									this.updateSelectionCentroid();
								}
								this.state = GameState.NEUTRAL;
							} else {
								// Group selection.
								xMin = Math.min(this.selectionStart[0], this.selectionEnd[0]);
								xMax = Math.max(this.selectionStart[0], this.selectionEnd[0]);
								yMin = Math.min(this.selectionStart[1], this.selectionEnd[1]);
								yMax = Math.max(this.selectionStart[1], this.selectionEnd[1]);
								for (i = 0; i < this.nodes.length; ++i) {
									node = this.nodes[i];
									if (xMin <= node[0] && node[0] <= xMax && yMin <= node[1] && node[1] <= yMax) {
										this.selection[i] = !this.selection[i];
									}
								}
								this.updateSelectionCentroid();
								this.state = GameState.NEUTRAL;
							}
							break;
						default:
							break;
					}
					break;
				case EventType.MOUSE_PRESS:
					switch (this.state) {
						case GameState.NEUTRAL:
							if (inputManager.isShiftPressed()) {
								// Selecting.
								this.state = GameState.SELECTING;
								this.selectionStart = mousePos.clone();
								this.selectionEnd = mousePos.clone();
							} else {
								// Dragging.
								this.clickedNode = this.getHoveredNode();
								if (this.clickedNode != null) {
									// Move clicked node and attached edges to the front.
									this.moveToFront(this.clickedNode);
									// Start dragging.
									this.state = GameState.DRAGGING;
									this.dragStart = mousePos.clone();
								}
								// Deselect all if a selected node was not clicked.
								if (this.clickedNode == null || !this.selection[this.clickedNode]) {
									this.selection = [false] * this.nodes.length;
								}
							}
							break;
						default:
							break;
					}
					break;
				case EventType.MOUSE_MOVE:
					dx = this.xMouse - this.lastMousePos[0];
					dy = this.yMouse - this.lastMousePos[1];
					switch (this.state) {
						case GameState.DRAGGING:
							this.nodes[this.clickedNode][0] += dx;
							this.nodes[this.clickedNode][1] += dy;
							// Also drag any selected nodes (except clicked node, since it was already dragged).
							for (i = 0; i < this.nodes.length; ++i) {
								if (this.selection[i] && i != this.clickedNode) {
									this.nodes[i][0] += dx;
									this.nodes[i][1] += dy;
									this.clamp(this.nodes[i]);
								}
							}
							break;
						case GameState.SELECTING:
							this.selectionEnd[0] += dx;
							this.selectionEnd[1] += dy;
							break;
						default:
							break;
					}
					this.lastMousePos = mousePos;
					break;
				default:
					break;
			}
		}

		// Allow free manual relaxation if the game is on.
		switch (this.state) {
			case GameState.OVER:
				break;
			case GameState.WON:
				break;
			default:
				// Relax nodes.
				if (inputManager.isKeyPressed(KeyboardKey.SPACE)) {
					this.relax(1);
				}
				// Flip selected nodes horizontally.
				if (inputManager.isKeyPressedThisFrame(KeyboardKey.H)) {
					for (i = 0; i < this.nodes.length; ++i) {
						if (this.selection[i]) {
							this.nodes[i][0] = 2 * this.selectionCentroid[0] - this.nodes[i][0];
							this.clamp(this.nodes[i]);
						}
					}
				}
				// Flip selected nodes vertically.
				if (inputManager.isKeyPressedThisFrame(KeyboardKey.V)) {
					for (i = 0; i < this.nodes.length; ++i) {
						if (this.selection[i]) {
							this.nodes[i][1] = 2 * this.selectionCentroid[1] - this.nodes[i][1];
							this.clamp(this.nodes[i]);
						}
					}
				}
				break;
		}

		// Find intersections and detect solutions.
		this.updateSolvedStatus();

		// Check for game over.
		switch (this.gameMode) {
			case GameMode.CASUAL:
				break;
			case GameMode.TIMED:
				if (!this.solved && this.levelTimer == 0) {
					this.endGame();
				}
				break;
			case GameMode.COUNTED:
				if (!this.solved && this.movesLeft == 0) {
					this.endGame();
				}
				break;
		}
	}

	function drawEdges() {
		for (i = 0; i < this.edgeDrawOrder.length; ++i) {
			j = this.edgeDrawOrder[i];
			alpha = this.state == GameState.WON
				? 64 * this.winTimer / WIN_TIMER_LENGTH
				: this.badEdgeMap[j] ? 255 : 64;
			x1 = this.nodes[this.edges[j][0]][0];
			y1 = this.nodes[this.edges[j][0]][1];
			x2 = this.nodes[this.edges[j][1]][0];
			y2 = this.nodes[this.edges[j][1]][1];
			// Draw edge outline.
			Graphics2D.Draw.line(x1, y1, x2, y2, EDGE_WIDTH + 2, 0, 0, 0, alpha);
			// Draw edge fill.
			edgeColor = this.edgeColors[j];
			Graphics2D.Draw.line(x1, y1, x2, y2, EDGE_WIDTH, edgeColor[0], edgeColor[1], edgeColor[2], alpha);
		}
	}

	function drawNodes() {
		for (i = 0; i < this.nodeDrawOrder.length; ++i) {
			j = this.nodeDrawOrder[i];
			nodeColor = this.selection[j] ? [255, 255, 255] : this.nodeColors[j];
			if (this.state == GameState.WON) {
				alpha = 64 * this.winTimer / WIN_TIMER_LENGTH;
			} else {
				alpha = this.badNodeMap[j] ? 255 : 64;
			}
			// Draw node outline.
			x = this.nodes[j][0] - NODE_RADIUS;
			y = this.nodes[j][1] - NODE_RADIUS;
			Graphics2D.Draw.ellipse
				( x, y
				, 2 * NODE_RADIUS, 2 * NODE_RADIUS
				, 0, 0, 0, alpha
				);
			// Draw node fill.
			Graphics2D.Draw.ellipse
				( x + NODE_BORDER, y + NODE_BORDER
				, 2 * NODE_RADIUS - 2 * NODE_BORDER, 2 * NODE_RADIUS - 2 * NODE_BORDER
				, nodeColor[0], nodeColor[1], nodeColor[2], alpha
				);
		}
	}

	function drawOverlay() {
		if (this.state == GameState.OVER) {
			Graphics2D.Draw.rectangle
				( 0, 0
				, this.resetText.width, this.resetText.height
				, this.bgColor[0], this.bgColor[1], this.bgColor[2], 192
				);
			this.resetText.draw(0, 0);
		} else {
			switch (this.gameMode) {
				case GameMode.CASUAL:
					break;
				case GameMode.TIMED:
					// Draw timer.
					alpha = this.state == GameState.WON ? 64 * this.winTimer / WIN_TIMER_LENGTH : 64;
					Graphics2D.Draw.rectangle
						( 0, 0
						, X_RES * this.levelTimer / this.maxLevelTime, BAR_HEIGHT
						, 0, 0, 0, alpha
						);
					break;
				case GameMode.COUNTED:
					// Draw move counter.
					alpha = this.state == GameState.WON ? 64 * this.winTimer / WIN_TIMER_LENGTH : 64;
					for (i = 0; i < this.movesLeft; ++i) {
						start = i * X_RES / this.maxMoves + 1;
						end = Math.min(X_RES - 1, (i + 1) * X_RES / this.maxMoves);
						Graphics2D.Draw.rectangle
							( start, 1
							, end - start, BAR_HEIGHT - 1
							, 0, 0, 0, alpha
							);
					}
					break;
			}
		}

		// Draw node count.
		Graphics2D.Draw.rectangle
			( 0, Y_RES - this.nodeCountText.height
			, this.nodeCountText.width, this.nodeCountText.height
			, this.bgColor[0], this.bgColor[1], this.bgColor[2], 192
			);
		this.nodeCountText.draw(0, Y_RES - this.nodeCountText.height);
	}

	function render() {
		Graphics2D.Draw.fill(this.bgColor[0], this.bgColor[1], this.bgColor[2]);

		this.drawEdges();
		this.drawNodes();

		// Draw selection box.
		if (this.state == GameState.SELECTING) {
			x = Math.min(this.selectionStart[0], this.selectionEnd[0]);
			y = Math.min(this.selectionStart[1], this.selectionEnd[1]);
			width = Math.abs(this.selectionEnd[0] - this.selectionStart[0]);
			height = Math.abs(this.selectionEnd[1] - this.selectionStart[1]);
			Graphics2D.Draw.rectangle(x, y, width, height, 255, 255, 255, 128);
			Graphics2D.Draw.line(x, y, x + width, y, 1, 0, 0, 0);
			Graphics2D.Draw.line(x, y, x, y + height, 1, 0, 0, 0);
			Graphics2D.Draw.line(x + width, y, x + width, y + height, 1, 0, 0, 0);
			Graphics2D.Draw.line(x, y + height, x + width, y + height, 1, 0, 0, 0);
		}

		this.drawOverlay();
	}
}
