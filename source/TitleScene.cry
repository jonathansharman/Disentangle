import Graphics2D;
import Graphics2DText;
import Math;
import TwoCansAlpha2;

const MIN_NODE_COUNT = 4;
const DFLT_NODE_COUNT = 8;

const MIN_REPEAT_DELAY = 2;
const MAX_REPEAT_DELAY = 20;

class Option {
	field index;
	field image;
	field position;
	field gameMode;
	field key;

	constructor(index, text, gameMode, key) {
		this.index = index;
		this.image = Font.font.setColor(0, 0, 0).render(text);
		this.position =
			[ X_RES / 2 - this.image.width / 2
			, Y_RES / 2 + 40 * index - this.image.height / 2
			];
		this.gameMode = gameMode;
		this.key = key;
	}

	function selected(inputManager) {
		if (inputManager.isKeyPressed(this.key)) {
			return true;
		}
		if (inputManager.didMouseClickHere(this.position[0], this.position[1], this.image.width, this.image.height)) {
			return true;
		}
		if (inputManager.isKeyPressed(KeyboardKey.SPACE) || inputManager.isKeyPressed(KeyboardKey.ENTER) && TitleScene.selection == this.index) {
			return true;
		}
		return false;
	}
}

class TitleScene : AbstractScene {
	static field nodeCount = DFLT_NODE_COUNT;
	static field selection = 0;

	field title = FontResource
		.fromSystem("Times New Roman")
		.getRenderer()
		.setSize(36)
		.setColor(0, 0, 0)
		.render("Disentangle");
	field options;

	field framesHoldingLeft= 0;
	field framesHoldingRight = 0;
	field repeatDelay = MAX_REPEAT_DELAY;
	field repeatCounter = MAX_REPEAT_DELAY;
	field pressDirection = 0;

	constructor() : base() {
		this.options = [];
		this.options.add(new Option(0, " 1) Casual mode ", GameMode.CASUAL, KeyboardKey.NUM_1));
		this.options.add(new Option(1, " 2) Timed mode ", GameMode.CASUAL, KeyboardKey.NUM_2));
		this.options.add(new Option(2, " 3) Move-counted mode ", GameMode.CASUAL, KeyboardKey.NUM_3));
	}

	function update(inputManager, events) {
		// Change mode selection.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.UP)) {
			TitleScene.selection = (TitleScene.selection - 1) % this.options.length;
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.DOWN)) {
			TitleScene.selection = (TitleScene.selection + 1) % this.options.length;
		}

		// Set starting nodes.
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) {
			if (!inputManager.isKeyPressed(KeyboardKey.RIGHT)) {
				if (this.pressDirection != -1) {
					this.pressDirection = -1;
					if (TitleScene.nodeCount > MIN_NODE_COUNT) {
						--TitleScene.nodeCount;
					}
				}
			} else {
				this.pressDirection = 0;
			}
		} else {
			if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) {
				if (this.pressDirection != 1) {
					this.pressDirection = 1;
					++TitleScene.nodeCount;
				}
			} else {
				this.pressDirection = 0;
			}
		}
		if (this.pressDirection != 0) {
			--this.repeatCounter;
			if (this.repeatCounter == 0) {
				TitleScene.nodeCount = Math.max(MIN_NODE_COUNT, TitleScene.nodeCount + this.pressDirection);
				this.repeatDelay = Math.max(1, this.repeatDelay - 3);
				this.repeatCounter = this.repeatDelay;
			}
		} else {
			this.repeatDelay = MAX_REPEAT_DELAY;
			this.repeatCounter = MAX_REPEAT_DELAY;
		}

		// Begin game when an option is selected.
		for (i = 0; i < this.options.length; ++i) {
			if (this.options[i].selected(inputManager)) {
				TitleScene.selection = i;
				this.switchScene(new LoadingScene(this.options[i].gameMode, TitleScene.nodeCount));
				return;
			}
		}
	}

	function render() {
		Graphics2D.Draw.fill(212, 212, 212);
		this.title.draw
			( X_RES / 2 - this.title.width / 2
			, Y_RES / 4 - this.title.height / 2
			);
		for (i = 0; i < this.options.length; ++i) {
			option = this.options[i];
			if (i == TitleScene.selection) {
				Graphics2D.Draw.rectangle
					( option.position[0]
					, option.position[1]
					, option.image.width
					, option.image.height
					, 160, 160, 160
					);
			}
			option.image.draw
				( option.position[0]
				, option.position[1]
				);
		}

		nodeCountText = Font.font.render("< " + TitleScene.nodeCount + " >");
		nodeCountText.draw
			( X_RES / 2 - nodeCountText.width / 2
			, 4 * Y_RES / 5 - nodeCountText.height / 2
			);
	}
}
